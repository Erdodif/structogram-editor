@use "sass:math";
@import "variables";
@import "mixins";

.highlight-select {
    opacity: 0.95;
}
.highlight-delete {
    opacity: 0.85;
    color: $color_statement_bg;
}
.highlight-create {
    background-color: aqua;
}
.statement {
    color: $color_statement_text;
    box-sizing: border-box;
    position: relative;
    font-family: "Courier New", Courier, monospace;
    min-width: 10ch;
    width: 100%;
    background: $color_statement_bg;
    height: fit-content;
    margin-inline: auto;
    & .main{
        position: relative;
        padding-block-start: 0.475em;
        padding-block-end: 0.275em;
        min-height: 1em;
    }
    & > .main:hover ~ .buttons,
    .buttons:hover {
        display: flex;
    }
    > .buttons {
        z-index: 10 !important;
        display: none;
        &::before {
            @include render_pseudo;
            width: .5em;
            height: 0.475em;
            border-radius: 0.5em;
            background: rgb(255, 0, 0);
            left: -0.655em;
            top: 0.025em;
        }
        &::after{
            @include render_pseudo;
            @include icon_background(.775em);
            z-index: 11 !important;
            background-image: $icon_arrow_up;
            height: .775em;
            width: .775em;
            margin-inline-start: -.675em;
            margin-block-start: .265em;
            transform: rotate(-90deg);
        }
        border: $border;
        font-weight: bold;
        flex-direction: row;
        flex-wrap: nowrap;
        border-radius: 0 0.525em 0.525em 0;
        position: absolute;
        left: 100%;
        min-width: 1em;
        width: fit-content;
        box-sizing: border-box;
        height: calc(2em + $border_width);
        top: 0%;
        margin-block-start: -$border_width;
        margin-inline-start: -$border_width;
        text-align: center;
        justify-self: center;
        padding-block: 0.275em;
        padding-inline: 0.725em;
        background: $color_s_btn_holder_bg;
        .action-button {
            color: $color_s_button_text;
            user-select: none;
            cursor: pointer;
            padding-inline: 0.525em;
            margin-inline: 0.255em;
            background-color: $color_s_button_bg;
            border-radius: 0.255em;
            align-self: center;
            height: 1.255em;
            line-height: 1.255em;
            &:hover {
                background-color: $color_s_button_bg_hover;
            }
        }
    }
    > .content {
        display: grid;
    }
    &.start,
    &.normal,
    &.skip {
        .main {
            border-block-end: $border;
            border-inline-end: $border;
            padding-inline: 1ch;
        }
        .content {
            grid-template-columns: 1fr;
        }
    }
    &.if {
        position: relative;
        display: grid;
        > .main {
            border-block-end: $border;
            border-inline-end: $border;
            padding-inline: 3.2ch;
            position: relative;
            &::before {
                @include if_indicator_true("I");
            }
            &::after {
                @include if_indicator_false("H");
            }
        }
        > .content {
            /* MODE: COMPACT-CHILDREN
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;*/

            //TODO, nem jÃ³
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
            grid-template-areas: true false
                otherwise;
            :last-child{
                grid-area: "otherwise";
            }
        }
    }
    &.loop, &.loop-reverse{
        .main{
            border-block-end:0;
        }
        .content{
            display: flex;
            flex-direction: column;
            >*{
                border-block-start: $border;
                border-block-end: unset;
            }
            > :not(:last-child){
                margin-inline-start: 2em;
                width: fit-content;
                min-width: calc(100% - 2em);
                border-inline-start: $border;
            }
            > :last-child{
                background-color: cadetblue;
            }
        }
    }
    &.loop-reverse{
        display: flex;
        flex-direction: column-reverse;
        .content{
            >*{
                border-block-start: $border;
                border-block-end: unset;
            }
            > :last-child{
                border-block-end: 0;
            }

        }
    }
}
